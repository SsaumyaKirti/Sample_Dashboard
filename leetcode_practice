with product_id as (
select product_id from Products where low_fats='Y' and
recyclable='Y') select * from product_id;

--------------------------------******************----------------------------------

/* Write your T-SQL query statement below */
select vv.customer_id, count(*) count_no_trans from Transactions tt 
right join Visits vv on tt.visit_id=vv.visit_id
where tt.amount is null group by customer_id;

------------------------------*****************------------------------------------

with name as
(select name from customer where isnull(referee_id,'') <> '2'
) select * from name;

-----------------------------*****************------------------------------------

select product_id, year as first_year, quantity, price from 
sales where (product_id, year) in (
select product_id, min(year) from sales 
group by  product_id );

---------------------------******************-------------------------------------
---------Write a solution to find all the classes that have at least five students.
with class as (
    select class from (select count(*) student_count,class from Courses 
    group by class )t where student_count >'5'
) select * from class ;

--------------------------******************--------------------------------------
------------------------Write a solution that will, for each user, return the number of followers.

select user_id, count(follower_id) followers_count
from followers f group by user_id;

-------------------------******************-----------------------------------------
-------------Write a solution to report the customer ids from the Customer table that bought all the products in the Product table.
select customer_id from (select customer_id, count(product_key) pkc  from customer 
group by customer_id)t 
where pkc in (select count(distinct product_key) from product) 
;

--------------------------*****************------------------------------------------
----------A single number is a number that appeared only once in the MyNumbers table.

Find the largest single number. If there is no single number, report null.
# Write your MySQL query statement below
select max(num) num from (select * from Mynumbers
group by num
having count(num) = 1)t;

# Write your MySQL query statement below
select ifnull(max(num),null) num from (select * from Mynumbers
group by num
having count(num) = 1)t;

--------------------------*****************--------------------------------------------
with employees_cal as (
select reports_to,count(reports_to) reports_count,
CEILING(SUM(age) / COALESCE(COUNT(reports_to), 1)) average_age 
from employees
group by reports_to) 

select e.employee_id,e.name,reports_count,average_age from Employees e
inner join employees_cal ecal on e.employee_id=ecal.reports_to;

------------------------******************-------------------------------------------

SELECT DISTINCT num as ConsecutiveNums
FROM (
SELECT num,
LAG(num) OVER (ORDER BY id) AS prev_num,
LEAD(num) OVER (ORDER BY id) AS next_num
FROM logs
) t
WHERE num = prev_num AND num = next_num;

-----------------------******************--------------------------------------

WITH product_history AS (
    SELECT 
        product_id,
        new_price,
        change_date
    FROM products
    WHERE change_date <= '2019-08-16'
),
latest_prices AS (
    SELECT 
        product_id,
        new_price,
        change_date,
        ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS row_num
    FROM product_history
),
all_products AS (
    SELECT DISTINCT product_id
    FROM products
)
SELECT 
    p.product_id,
    CASE 
        WHEN lp.row_num = 1 THEN lp.new_price
        ELSE 10
    END AS price_on_2019_08_16
FROM all_products p
LEFT JOIN latest_prices lp
ON p.product_id = lp.product_id AND lp.row_num = 1;

---------------------------13/03/2025----------------------

select employee_id from employees where 
manager_id not in (select employee_id from employees)
 and salary<30000
 order by employee_id;

--------------------------14/03/2025-----------------------

WITH SeatsWithNeighbors AS (
    SELECT 
        CAST(id AS INT) AS seat_id,
        CAST(student AS VARCHAR) AS student,
        LEAD(id) OVER (ORDER BY id) AS next_seat_id,
        LAG(id) OVER (ORDER BY id) AS previous_seat_id
    FROM 
        seat
),
SwappedSeats AS (
    SELECT
        CAST(seat_id AS INT) AS original_seat_id,
        CASE
            WHEN seat_id % 2 = 1 AND next_seat_id IS NOT NULL THEN next_seat_id
            WHEN seat_id % 2 = 0 AND previous_seat_id IS NOT NULL THEN previous_seat_id
            ELSE seat_id
        END AS swapped_seat_id
    FROM 
        SeatsWithNeighbors
)
SELECT
    CAST(S1.original_seat_id AS INT) AS id,
    CAST(S2.student AS VARCHAR) AS student
FROM 
    SwappedSeats S1
JOIN 
    seat S2
ON 
    S1.swapped_seat_id = S2.id
ORDER BY 
    S1.original_seat_id;

-------------------------***********modify***********-------------------------

SELECT results
FROM (
    SELECT TOP 1 u.name AS results
    FROM users u
    JOIN (
        SELECT TOP 5 user_id, COUNT(*) AS rating_count
        FROM movierating
        GROUP BY user_id
        ORDER BY rating_count DESC
    ) top_user
    ON u.user_id = top_user.user_id
    ORDER BY u.name ASC
    UNION ALL
    SELECT top 1 m.title AS results
    FROM movies m
    JOIN (select top 1 max(avg_rating) max_avg_rating,movie_id from(
        SELECT movie_id, AVG(cast(rating as decimal(10,2))) AS avg_rating
        FROM movierating
        WHERE created_at >= '2020-02-01' AND created_at < '2020-03-01'
        GROUP BY movie_id )t GROUP BY movie_id
   ) subquery 
   ON m.movie_id = subquery.movie_id
) t;

---------------------------**************************-------------------------

WITH id_counts AS (
    SELECT id, COUNT(*) AS count
    FROM (
        SELECT requester_id AS id
        FROM requestaccepted
        UNION ALL
        SELECT accepter_id AS id
        FROM requestaccepted
    ) t
    GROUP BY id
)
SELECT top 1 id, MAX(count) AS num
FROM id_counts group by id
ORDER BY num DESC 
;

-------------------------***********17-3-2025****************-----------------------------

SELECT round(SUM(tiv_2016),2) tiv_2016
FROM insurance AS outer_table
WHERE EXISTS (
    SELECT 1
    FROM insurance AS inner_table
    WHERE outer_table.tiv_2015 = inner_table.tiv_2015
      AND outer_table.pid <> inner_table.pid
)
AND NOT EXISTS (
    SELECT 1
    FROM insurance AS inner_table
    WHERE outer_table.lat = inner_table.lat
      AND outer_table.lon = inner_table.lon
      AND outer_table.pid <> inner_table.pid
);
